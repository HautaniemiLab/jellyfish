import { createGenerator } from "ts-json-schema-generator";
import { writeFileSync } from "fs";

/** @type {import('ts-json-schema-generator/dist/src/Config').Config} */
const config = {
  tsconfig: "./tsconfig.json",
  type: "InSchema",
  sortProps: false,
};

const schema = createGenerator(config).createSchema(config.type);

function generateDefaults(schema) {
  function generateProps(properties) {
    const lines = [];
    for (const [key, value] of Object.entries(properties)) {
      if (value.default !== undefined) {
        lines.push(`  ${key}: ${JSON.stringify(value.default)}`);
      } else {
        console.warn(`Warning: No default defined for '${key}'`);
      }
    }
    return lines;
  }

  const jsCode = `
// Automatically generated by extract-default-properties.mjs

import {
  type LayoutProperties,
  type CostWeights
} from "./layout.js";

export const DEFAULT_PROPERTIES = {
${generateProps(schema.definitions["LayoutProperties"].properties).join(",\n")}
} as LayoutProperties;

export const DEFAULT_COST_WEIGHTS = {
${generateProps(schema.definitions["CostWeights"].properties).join(",\n")}
} as CostWeights;
`;
  return jsCode;
}

writeFileSync("src/defaultProperties.ts", generateDefaults(schema));
